generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  image            String?
  password         String?
  role             String          @default("USER")
  isActive         Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  accounts         Account[]
  addresses        Address[]
  cart             Cart?
  favorites        Favorite[]
  orders           Order[]
  ratings          ProductRating[]
  reviews          Review[]
  sessions         Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Slider {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  description String?
  image       String
  link        String?
  buttonText  String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sliders")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  logo        String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("brands")
}

model Product {
  id            String             @id @default(cuid())
  name          String
  description   String
  price         Float
  salePrice     Float?
  images        String
  inStock       Boolean            @default(true)
  stockCount    Int                @default(0)
  sku           String             @unique
  brandId       String?
  volume        String?
  categoryId    String
  isNew         Boolean            @default(false)
  isOnSale      Boolean            @default(false)
  isActive      Boolean            @default(true)
  averageRating Float              @default(0)
  reviewCount   Int                @default(0)
  deletedAt     DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  cartItems     CartItem[]
  favorites     Favorite[]
  orderItems    OrderItem[]
  attributes    ProductAttribute[]
  ratings       ProductRating[]
  variants      ProductVariant[]
  brand         Brand?             @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category      Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  reviews       Review[]

  @@map("products")
}

model ProductVariant {
  id         String      @id @default(cuid())
  productId  String
  volume     String
  price      Float
  salePrice  Float?
  stock      Int         @default(0)
  sku        String      @unique
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductAttribute {
  id        String   @id @default(cuid())
  productId String
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_attributes")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model ProductRating {
  id             String   @id @default(cuid())
  productId      String
  userId         String?
  guestSessionId String?
  rating         Int?
  comment        String?
  relationship   String?
  longevity      String?
  sillage        String?
  ageGroup       String?
  season         String?
  timeOfDay      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId, guestSessionId])
  @@map("product_ratings")
}

model Settings {
  id                       String   @id @default(cuid())
  siteName                 String   @default("Sahib Parfumeriya")
  siteDescription          String   @default("Premium Parfüm Mağazası")
  contactEmail             String   @default("info@sahibparfumeriya.az")
  contactPhone             String   @default("+994 50 123 45 67")
  address                  String   @default("Bakı şəhəri, Nərimanov rayonu")
  currency                 String   @default("AZN")
  taxRate                  Float    @default(18.0)
  deliveryCost             Float    @default(10.0)
  freeDeliveryThreshold    Float    @default(100.0)
  maintenanceMode          Boolean  @default(false)
  allowRegistration        Boolean  @default(true)
  requireEmailVerification Boolean  @default(true)
  // Meta data fields
  metaTitle                String?  @default("SAHIB perfumery & cosmetics - Premium Parfüm Mağazası")
  metaDescription          String?  @default("Ən yaxşı parfüm markaları, sərfəli qiymətlər və keyfiyyətli xidmət. Online parfüm alış-verişi üçün etibarlı platforma.")
  metaKeywords             String?  @default("parfüm, ətir, sahib parfumeriya, online mağaza, parfüm alış-verişi")
  metaAuthor               String?  @default("SAHIB perfumery & cosmetics")
  ogTitle                  String?  @default("SAHIB perfumery & cosmetics - Premium Parfüm Mağazası")
  ogDescription            String?  @default("Ən yaxşı parfüm markaları, sərfəli qiymətlər və keyfiyyətli xidmət.")
  ogLocale                 String?  @default("az_AZ")
  ogType                   String?  @default("website")
  twitterCard              String?  @default("summary")
  twitterTitle             String?  @default("SAHIB perfumery & cosmetics - Premium Parfüm Mağazası")
  twitterDescription       String?  @default("Ən yaxşı parfüm markaları, sərfəli qiymətlər və keyfiyyətli xidmət.")
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@map("settings")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  cartId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique
  userId            String?
  guestEmail        String?
  guestName         String?
  guestPhone        String?
  status            String      @default("PENDING")
  totalAmount       Float
  paymentStatus     String      @default("PENDING")
  paymentMethod     String
  shippingAddressId String?
  billingAddressId  String?
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  transactionId     Int?
  
  // Hissəli ödəniş məlumatları
  installmentFirstName     String?
  installmentLastName      String?
  installmentFatherName    String?
  installmentIdCardFront   String?
  installmentIdCardBack    String?
  installmentRegAddress    String?
  installmentActualAddress String?
  installmentCityNumber    String?
  installmentFamilyMembers String? // JSON string
  installmentWorkplace     String?
  installmentPosition      String?
  installmentSalary        String?
  
  orderItems        OrderItem[]
  billingAddress    Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  user              User?       @relation(fields: [userId], references: [id])

  @@index([transactionId])
  @@map("orders")
}

model OrderItem {
  id               String          @id @default(cuid())
  quantity         Int
  price            Float
  orderId          String
  productId        String
  productVariantId String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  order            Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product          Product         @relation(fields: [productId], references: [id])
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@map("order_items")
}

model Address {
  id          String   @id @default(cuid())
  type        String
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String?
  postalCode  String
  country     String
  phone       String?
  isDefault   Boolean  @default(false)
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingFor  Order[]  @relation("BillingAddress")
  shippingFor Order[]  @relation("ShippingAddress")

  @@map("addresses")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

model SupportContent {
  id        String   @id @default(cuid())
  title     String
  content   String
  page      String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("support_content")
}

model Blog {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  excerpt     String?
  content     String
  image       String?
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("blogs")
}
